// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: common/InitConnect.proto

package common

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type C2S struct {
	state      protoimpl.MessageState `protogen:"open.v1"`
	ClientVer  *int32                 `protobuf:"varint,1,req,name=clientVer" json:"clientVer,omitempty"`   //客户端版本号，clientVer = "."以前的数 * 100 + "."以后的，举例：1.1版本的 clientVer 为1 * 100 + 1 = 101，2.21版本为2 * 100 + 21 = 221
	ClientID   *string                `protobuf:"bytes,2,req,name=clientID" json:"clientID,omitempty"`      //客户端唯一标识，无生具体生成规则，客户端自己保证唯一性即可
	RecvNotify *bool                  `protobuf:"varint,3,opt,name=recvNotify" json:"recvNotify,omitempty"` //此连接是否接收市场状态、交易需要重新解锁等等事件通知，true 代表接收，OpenD 就会向此连接推送这些通知，反之 false 代表不接收不推送
	// 如果通信要加密，首先得在 OpenD 和客户端都配置 RSA 密钥，不配置始终不加密
	// 如果配置了 RSA 密钥且指定的加密算法不为 PacketEncAlgo_None 则加密(即便这里不设置，配置了 RSA 密钥，也会采用默认加密方式)，默认采用 FTAES_ECB 算法
	PacketEncAlgo *int32 `protobuf:"varint,4,opt,name=packetEncAlgo" json:"packetEncAlgo,omitempty"` //指定包加密算法，参见 Common.PacketEncAlgo 的枚举定义
	PushProtoFmt  *int32 `protobuf:"varint,5,opt,name=pushProtoFmt" json:"pushProtoFmt,omitempty"`   //指定这条连接上的推送协议格式，若不指定则使用 push_proto_type 配置项
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *C2S) Reset() {
	*x = C2S{}
	mi := &file_common_InitConnect_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *C2S) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*C2S) ProtoMessage() {}

func (x *C2S) ProtoReflect() protoreflect.Message {
	mi := &file_common_InitConnect_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use C2S.ProtoReflect.Descriptor instead.
func (*C2S) Descriptor() ([]byte, []int) {
	return file_common_InitConnect_proto_rawDescGZIP(), []int{0}
}

func (x *C2S) GetClientVer() int32 {
	if x != nil && x.ClientVer != nil {
		return *x.ClientVer
	}
	return 0
}

func (x *C2S) GetClientID() string {
	if x != nil && x.ClientID != nil {
		return *x.ClientID
	}
	return ""
}

func (x *C2S) GetRecvNotify() bool {
	if x != nil && x.RecvNotify != nil {
		return *x.RecvNotify
	}
	return false
}

func (x *C2S) GetPacketEncAlgo() int32 {
	if x != nil && x.PacketEncAlgo != nil {
		return *x.PacketEncAlgo
	}
	return 0
}

func (x *C2S) GetPushProtoFmt() int32 {
	if x != nil && x.PushProtoFmt != nil {
		return *x.PushProtoFmt
	}
	return 0
}

var File_common_InitConnect_proto protoreflect.FileDescriptor

const file_common_InitConnect_proto_rawDesc = "" +
	"\n" +
	"\x18common/InitConnect.proto\x12\x06common\"\xa9\x01\n" +
	"\x03C2S\x12\x1c\n" +
	"\tclientVer\x18\x01 \x02(\x05R\tclientVer\x12\x1a\n" +
	"\bclientID\x18\x02 \x02(\tR\bclientID\x12\x1e\n" +
	"\n" +
	"recvNotify\x18\x03 \x01(\bR\n" +
	"recvNotify\x12$\n" +
	"\rpacketEncAlgo\x18\x04 \x01(\x05R\rpacketEncAlgo\x12\"\n" +
	"\fpushProtoFmt\x18\x05 \x01(\x05R\fpushProtoFmtB\n" +
	"Z\b.;common"

var (
	file_common_InitConnect_proto_rawDescOnce sync.Once
	file_common_InitConnect_proto_rawDescData []byte
)

func file_common_InitConnect_proto_rawDescGZIP() []byte {
	file_common_InitConnect_proto_rawDescOnce.Do(func() {
		file_common_InitConnect_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_common_InitConnect_proto_rawDesc), len(file_common_InitConnect_proto_rawDesc)))
	})
	return file_common_InitConnect_proto_rawDescData
}

var file_common_InitConnect_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_common_InitConnect_proto_goTypes = []any{
	(*C2S)(nil), // 0: common.C2S
}
var file_common_InitConnect_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_common_InitConnect_proto_init() }
func file_common_InitConnect_proto_init() {
	if File_common_InitConnect_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_common_InitConnect_proto_rawDesc), len(file_common_InitConnect_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_common_InitConnect_proto_goTypes,
		DependencyIndexes: file_common_InitConnect_proto_depIdxs,
		MessageInfos:      file_common_InitConnect_proto_msgTypes,
	}.Build()
	File_common_InitConnect_proto = out.File
	file_common_InitConnect_proto_goTypes = nil
	file_common_InitConnect_proto_depIdxs = nil
}
